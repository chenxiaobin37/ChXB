import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;

public class Win 
{
	public static void main(String[] args) 
	{
        GameWin frame=new GameWin();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
	}
	
	public static boolean isplaying=true;
}

class GameWin extends JFrame
{
	public GameWin()
	{
		this.setFocusable(true);
		getContentPane().requestFocus();
		this.setAlwaysOnTop(true);
		setTitle("super russionBlock");
		setBounds(350,90,Default_X,Default_Y);
		setResizable(false);
		add(jpy1);
		jpy1.setDividerLocation(304);
		jpy1.setDividerSize(4);
		addKeyListener(jpy2);
		Thread t=new Thread(jpy2);
		t.start();
	}
	
	public static final int Default_X=500;
	public static final int Default_Y=630;
    private left jpy2=new left();
    private right jpy3=new right();
	private JSplitPane jpy1=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,jpy2,jpy3);
}

class right extends JPanel implements ActionListener
{
	public right()
	{
		initialframe();
		initialListener();
	}
	
	public void initialframe()
	{
		setLayout(null);
		add(jlArray[0]);
		jlArray[0].setBounds(30,60,70,30);
		jlArray[0].setFocusable(false);
		add(jlArray[1]);
		jlArray[1].setBounds(30,140,70,30);
		jlArray[1].setFocusable(false);
		add(jcArray[0]);
		jcArray[0].setBounds(100,60,70,30);
		jcArray[0].setFocusable(false);
		add(jcArray[1]);
		jcArray[1].setBounds(100,140,70,30);
		jcArray[1].setFocusable(false);
		add(jbArray[0]);
		jbArray[0].setBounds(50,240,100,35);
		jbArray[0].setFocusable(false);
		add(jbArray[1]);
		jbArray[1].setBounds(50,310,100,35);
		jbArray[1].setFocusable(false);
		add(jbArray[2]);
		jbArray[2].setBounds(50,380,100,35);
		jbArray[2].setFocusable(false);
		add(jbArray[3]);
		jbArray[3].setBounds(50,450,100,35);     
		jbArray[3].setFocusable(false);
	}

	public void initialListener()
	{
		for(int i=0;i<4;i++)
		    jbArray[i].addActionListener(this);
	}
	
	public void actionPerformed(ActionEvent e)
	{
		if(e.getSource()==jbArray[0])
		{
			Win.isplaying=true;
		}
		else if(e.getSource()==jbArray[1])
		{
			Win.isplaying=false;
		}
		else if(e.getSource()==jbArray[2])
		{
			Win.isplaying=false;
		}
		else if(e.getSource()==jbArray[3])
		{
			System.exit(0);
		}
	}
	
	private String[] level={"1","2","3","4","5"};
	private String[] color={"浅绿","浅黄","黑色"};
	private JComboBox[] jcArray={new JComboBox(level),new JComboBox(color)}; 
	private JLabel[] jlArray={new JLabel("游戏等级"),new JLabel("空间背景")};
	private JButton[] jbArray={new JButton("开始游戏"),new JButton("暂停游戏")
	                          ,new JButton("结束游戏"),new JButton("退出游戏")};
}

class left extends JComponent implements KeyListener,Runnable
{
	public left()
	{
		game=new RussionBlockGame();
	}
	
	public void paintComponent(Graphics g)
	{
		Graphics2D g2=(Graphics2D)g;
		super.paintComponent(g);
		double width=300,height=600;
		Rectangle2D rect=new Rectangle2D.Double(0,0,width,height);
		g2.setColor(Color.black);
		g2.draw(rect);
		g2.setColor(Color.yellow);
		g2.fill(rect);
		g2.setColor(Color.black);
		g2.draw(rect);
		for(int i=0;i<20;i++)
			for(int j=0;j<10;j++)
			{
				if(game.judge(i,j)==true)
				{
					Rectangle2D rect3=new Rectangle2D.Double(j*boxSize,i*boxSize,boxSize,boxSize);
					g2.setColor(Color.black);
					g2.draw(rect3);
					g2.setColor(Color.red);
					g2.fill(rect3);
					g2.setColor(Color.black);
					g2.draw(rect3);
				}
			}
		game.notsure();
	}
	
	public void keyTyped(KeyEvent e) 
	{}
	
	public void keyPressed(KeyEvent e) 
	{
		if(Win.isplaying==false)
			return;
		switch(e.getKeyCode())
		{
		case KeyEvent.VK_LEFT:                                       //LEFT
			game.moveleft();
			movejudge();
			break;	
		case KeyEvent.VK_UP:                                         //UP
			game.turnright();
			movejudge();
			break;                                   
		case KeyEvent.VK_RIGHT:                                      //RIGHT
			game.moveright();
			movejudge();
			break;
		case KeyEvent.VK_DOWN:                                       //DOWN
			game.movedown();
			movejudge();
			break;
		}
	}

	public void keyReleased(KeyEvent e) 
	{}	
	
	public void movejudge()
    {
    	if(game.Iscanmoveto()==true)
    	{
    		game.sure();
    		repaint();
    	}
    	else if(game.Ishitbottom()==true)
    	{
    		game.CheckAndCutLine();
    		game.makenewblock();
    		repaint();
    		if(game.IsGameOver()==true)
    			Win.isplaying=false;
    	}
    }

	public void run()
	{
		try
		{
			while(Win.isplaying)
			{
		        Thread.sleep(500);
	    	    game.movedown();
    		    movejudge();
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
	
	private RussionBlockGame game;
	public static final int boxSize=30;
}
